/*
 * Copyright 2014 The British Library/SCAPE Project Consortium
 * Author: William Palmer (William.Palmer@bl.uk)
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package uk.bl.dpt.qa.geo.misc;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Parse XML generated by FileInfoSpider
 * @author wpalmer
 *
 */
public class ExtractData extends DefaultHandler {

	private String gOutput = "";
	private PrintWriter gOut = null;
	
	private String gChars = "";
	private Attributes gAttributes;
	
	private String gMime = "";
	private String gValid = "";
	private String gFilename = "";
	private String gCksum = "";

	/**
	 * @param pOut
	 */
	public ExtractData(PrintWriter pOut) {
		gOut = pOut;
	}
	
	/* (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#endDocument()
	 */
	@Override
	public void endDocument() throws SAXException {
		super.endDocument();
	
	}

	/* (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#endElement(java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		super.endElement(uri, localName, qName);
		
		// just make sure any whitespace is trimmed
		gChars = gChars.trim();
		
		if(qName.equals("file")) {
			gFilename = gChars;
			final String s = "";//base directory
			if(gFilename.startsWith(s)) {
				gFilename = gFilename.substring(s.length());
			}
		}
		
		if(qName.equals("isvalid")) {
			gValid = gAttributes.getValue("result");
		}
		
		if(qName.equals("checksum")) {
			if(gAttributes.getValue("digest").toLowerCase().equals("cksum")) {
				gCksum = gChars;
			}
		}

		if(qName.equals("mimetype")) {
			gMime = gChars;
		}
		
		if(qName.equals("check")) {
			final String sep = ",";
			gOutput = gFilename+sep+gValid+sep+gCksum+sep+gMime;
			gOut.println(gOutput);
			//System.out.println(gOutput);
			// wipe variables
			gOutput = "";
			gMime = "";
			gValid = "";
			gFilename = "";
			gCksum = "";
		}
		
		gChars = "";
	
	}

	/* (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#startDocument()
	 */
	@Override
	public void startDocument() throws SAXException {
		super.startDocument();

	}

	/* (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
	 */
	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		super.startElement(uri, localName, qName, attributes);
		gAttributes = attributes;
		
	}

	/* (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#characters(char[], int, int)
	 */
	@Override
	public void characters(char[] ch, int start, int length)
			throws SAXException {
		super.characters(ch, start, length);
		
		gChars += new String(ch, start, length).trim();
		
	}
	
	/**
	 * Write stats to a PrintWriter
	 * @param out
//	 */
//	public void writeStats(PrintWriter out) {
//		out.println("Ext:");
//		out.println("===================================");
//		for(String k:gExt.keySet()) {
//			out.println(k+": "+gExt.get(k));
//		}
//
//		out.println();
//		out.println("tika:");
//		out.println("===================================");
//		for(String k:gTika.keySet()) {
//			out.println(k+": "+gTika.get(k));
//		}
//	}

	@SuppressWarnings("javadoc")
	public static void main(String[] args) {
		
		String inputFile = "";
		PrintWriter out = null;
		//PrintWriter stats = null;
		
		try {
			out = new PrintWriter(new FileWriter(inputFile+".csv"));
			//stats = new PrintWriter(new FileWriter(inputFile+".txt"));
		} catch(IOException e) {
			e.printStackTrace();
			return;
		}

		ExtractData spider = new ExtractData(out);

		try {
			SAXParserFactory spf = SAXParserFactory.newInstance();
			spf.setNamespaceAware(false);
			SAXParser parser = spf.newSAXParser();
			XMLReader reader = parser.getXMLReader();
			reader.setContentHandler(spider);
			reader.parse(new InputSource(new AddXMLHeaderInputStream(new BufferedInputStream(new FileInputStream(new File(inputFile))))));
		} catch(SAXException e) {
			e.printStackTrace();
			
		} catch (ParserConfigurationException e) {
			
			e.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		//spider.writeStats(stats);
		
		out.close();
		//stats.close();

	}

}
